<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zt.erp.mapper.PartsMapper">
  <resultMap id="BaseResultMap" type="com.zt.erp.entity.Parts">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="parts_no" jdbcType="VARCHAR" property="partsNo" />
    <result column="parts_name" jdbcType="VARCHAR" property="partsName" />
    <result column="in_price" jdbcType="DECIMAL" property="inPrice" />
    <result column="sale_price" jdbcType="DECIMAL" property="salePrice" />
    <result column="inventory" jdbcType="INTEGER" property="inventory" />
    <result column="type_id" jdbcType="INTEGER" property="typeId" />
    <result column="address" jdbcType="VARCHAR" property="address" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, parts_no, parts_name, in_price, sale_price, inventory, type_id, address
  </sql>
  <select id="selectByExample" parameterType="com.zt.erp.entity.PartsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from parts
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from parts
    where id = #{id,jdbcType=INTEGER}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from parts
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.zt.erp.entity.PartsExample">
    delete from parts
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zt.erp.entity.Parts">
    insert into parts (id, parts_no, parts_name, 
      in_price, sale_price, inventory, 
      type_id, address)
    values (#{id,jdbcType=INTEGER}, #{partsNo,jdbcType=VARCHAR}, #{partsName,jdbcType=VARCHAR}, 
      #{inPrice,jdbcType=DECIMAL}, #{salePrice,jdbcType=DECIMAL}, #{inventory,jdbcType=INTEGER}, 
      #{typeId,jdbcType=INTEGER}, #{address,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.zt.erp.entity.Parts">
    insert into parts
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="partsNo != null">
        parts_no,
      </if>
      <if test="partsName != null">
        parts_name,
      </if>
      <if test="inPrice != null">
        in_price,
      </if>
      <if test="salePrice != null">
        sale_price,
      </if>
      <if test="inventory != null">
        inventory,
      </if>
      <if test="typeId != null">
        type_id,
      </if>
      <if test="address != null">
        address,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="partsNo != null">
        #{partsNo,jdbcType=VARCHAR},
      </if>
      <if test="partsName != null">
        #{partsName,jdbcType=VARCHAR},
      </if>
      <if test="inPrice != null">
        #{inPrice,jdbcType=DECIMAL},
      </if>
      <if test="salePrice != null">
        #{salePrice,jdbcType=DECIMAL},
      </if>
      <if test="inventory != null">
        #{inventory,jdbcType=INTEGER},
      </if>
      <if test="typeId != null">
        #{typeId,jdbcType=INTEGER},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zt.erp.entity.PartsExample" resultType="java.lang.Long">
    select count(*) from parts
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>

    <resultMap id="PartsWithType" type="com.zt.erp.entity.Parts" extends="BaseResultMap">
        <association property="type" javaType="com.zt.erp.entity.Type" column="type_id">
            <id column="type_id" property="id"/>
            <result column="type_name" property="typeName"/>
        </association>
    </resultMap>
    <select id="findPageWithTypeMap" resultMap="PartsWithType">
  SELECT p.*, t.type_name
      FROM
      parts as p
      LEFT JOIN `type` as t
      ON  p.type_id = t.id
      <where>
        <if test="partsName != null and partsName != ''">
          AND  p.parts_name like concat('%',#{partsName},'%')
        </if>
        <if test="partsType != null and partsType != ''">
          AND  p.type_id = #{partsType}
        </if>
        <if test="partsInventory != null and partsInventory != ''">
          and p.inventory >= #{partsInventory} order by inventory desc
        </if>
      </where>

    </select>
    <select id="selectPartsNo" resultType="com.zt.erp.entity.Parts">
      select * from parts where parts_name = #{partsNo}
    </select>

    <update id="updateByExampleSelective" parameterType="map">
    update parts
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.partsNo != null">
        parts_no = #{record.partsNo,jdbcType=VARCHAR},
      </if>
      <if test="record.partsName != null">
        parts_name = #{record.partsName,jdbcType=VARCHAR},
      </if>
      <if test="record.inPrice != null">
        in_price = #{record.inPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.salePrice != null">
        sale_price = #{record.salePrice,jdbcType=DECIMAL},
      </if>
      <if test="record.inventory != null">
        inventory = #{record.inventory,jdbcType=INTEGER},
      </if>
      <if test="record.typeId != null">
        type_id = #{record.typeId,jdbcType=INTEGER},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update parts
    set id = #{record.id,jdbcType=INTEGER},
      parts_no = #{record.partsNo,jdbcType=VARCHAR},
      parts_name = #{record.partsName,jdbcType=VARCHAR},
      in_price = #{record.inPrice,jdbcType=DECIMAL},
      sale_price = #{record.salePrice,jdbcType=DECIMAL},
      inventory = #{record.inventory,jdbcType=INTEGER},
      type_id = #{record.typeId,jdbcType=INTEGER},
      address = #{record.address,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zt.erp.entity.Parts">
    update parts
    <set>
      <if test="partsNo != null">
        parts_no = #{partsNo,jdbcType=VARCHAR},
      </if>
      <if test="partsName != null">
        parts_name = #{partsName,jdbcType=VARCHAR},
      </if>
      <if test="inPrice != null">
        in_price = #{inPrice,jdbcType=DECIMAL},
      </if>
      <if test="salePrice != null">
        sale_price = #{salePrice,jdbcType=DECIMAL},
      </if>
      <if test="inventory != null">
        inventory = #{inventory,jdbcType=INTEGER},
      </if>
      <if test="typeId != null">
        type_id = #{typeId,jdbcType=INTEGER},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zt.erp.entity.Parts">
    update parts
    set parts_no = #{partsNo,jdbcType=VARCHAR},
      parts_name = #{partsName,jdbcType=VARCHAR},
      in_price = #{inPrice,jdbcType=DECIMAL},
      sale_price = #{salePrice,jdbcType=DECIMAL},
      inventory = #{inventory,jdbcType=INTEGER},
      type_id = #{typeId,jdbcType=INTEGER},
      address = #{address,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>